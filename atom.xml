<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Alfanso]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2014-03-26T08:02:19+01:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Is your Application&#039;s UI breaking in Internet Explorer?]]></title>
            <link href="/blog/2014/03/26/is-your-applications-ui-breaking-in-internet-explorer"/>
            <updated>2014-03-26T00:00:00+01:00</updated>
            <id>/blog/2014/03/26/is-your-applications-ui-breaking-in-internet-explorer</id>
            <content type="html"><![CDATA[<p>I'm working on a side project during weekends which is a management application of real estate agents. They use use Internet Explorer only on their Windows machine.</p>

<p>I came across a weird bug where few CSS styles were not getting applied at all :(.
I was concatenating all my stylesheets into a single CSS file to avoid extra http requests.
After some research, I found that there's a limit on number of stylesheet rules we can define in a single CSS file.
<a href="http://blogs.msdn.com/b/ieinternals/archive/2011/05/14/10164546.aspx">It can not be more than 4095 in a single CSS file</a>.</p>

<p><strong>Isn't that weird?</strong></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[List of softwares, hardwares, tools I use to be more productive]]></title>
            <link href="/blog/2014/03/16/toolkit-to-increase-productivity"/>
            <updated>2014-03-16T00:00:00+01:00</updated>
            <id>/blog/2014/03/16/toolkit-to-increase-productivity</id>
            <content type="html"><![CDATA[<p>We are always looking for and playing with new tools, softwares, hardwares to increase our productivity so we waste less time on unproductive stuff and more on productive work. Here are list of few that I use.</p>

<h4>Hardware</h4>

<ul>
<li><a href="http://apple.com/in/mac-pro">15' Macbook Pro</a> with Mavericks OS</li>
</ul>

<h4>Web based softwares</h4>

<ul>
<li><a href="http://invoicemachine.com">InvoiceMachine</a> - For sending invoice</li>
<li><a href="http://trello.com">Trello</a> - To-do list</li>
<li><a href="http://digitalocean.com">Digital Ocean</a> - VPS</li>
<li><a href="http://bitbucket.com">Bitbucket</a> - To host git repositories</li>
</ul>

<p><a name='readmore'></a></p>

<h4>Softwares</h4>

<ul>
<li><a href="http://www.sublimetext.com/">Sublime</a> - Text Editor</li>
<li><a href="http://mouapp.com">Mou</a> - Markdown Editor</li>
<li><a href="http://skype.com">Skype</a> - Communicating with team</li>
<li><a href="http://gotomeeting.com">Go To Meeting</a>, <a href="http://webex.com">WebEx</a> - Conference call</li>
<li><a href="http://iterm2.com">iTerm2</a> - Terminal for mac</li>
<li><a href="http://evernote.com">Evernote</a> - Notes taking</li>
<li><a href="http://www.techsmith.com/jing.html">Jing</a> - Recording and sharing screencasts and screenshots</li>
<li>iCal - Scheduling calls</li>
<li><a href="http://dropbox.com">Dropbox</a> - Sharing files</li>
</ul>

<h4>Tools and Frameworks</h4>

<ul>
<li><a href="http://sculpin.io">Sculpin</a> - Static site generator for this blog</li>
<li>HTML, CSS, <a href="http://sass-lang.com">Scss</a>, <a href="http://getbootstrap.com">Twitter Bootstrap</a>, Javascript, <a href="http://jquery.com">jQuery</a>, <a href="http://angularjs.com">AngularJS</a> - For front-end development</li>
<li><a href="http://laravel.com">Laravel</a> - For back-end development</li>
<li><a href="http://gulpjs.com">Gulp.js</a> - To automate front-end workflow</li>
</ul>

<p>Feel free to share tools you use to increase your productivity.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Single page conference website using Bootstrap]]></title>
            <link href="/blog/2014/03/06/single-page-conference-website-using-bootstrap"/>
            <updated>2014-03-06T00:00:00+01:00</updated>
            <id>/blog/2014/03/06/single-page-conference-website-using-bootstrap</id>
            <content type="html"><![CDATA[<p><img src="http://i.imgur.com/Rf51j6o.jpg" alt="Top Banner" />
<img src="http://i.imgur.com/kPJ6D4Q.png" alt="Speakers" />
<img src="http://i.imgur.com/QCjftwz.png" alt="Schedule" />
<img src="http://i.imgur.com/pnMvQDO.png" alt="Sponsors and Venue" />
<img src="http://i.imgur.com/icZUl5l.png" alt="Code of Conduct and Contact" /></p>

<div class='text-center'>
  <a href='https://db.tt/v1CERWx4' class='btn btn-default' title='Demo' target='_blank'>Demo</a>
  <a href='https://db.tt/wlitzlRV' class='btn btn-primary' title='Download' target='_blank'>Download (1.07 MB)</a>
</div>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Improve front-end workflow using gulp.js]]></title>
            <link href="/blog/2014/03/04/improve-front-end-workflow-using-gulpjs"/>
            <updated>2014-03-04T00:00:00+01:00</updated>
            <id>/blog/2014/03/04/improve-front-end-workflow-using-gulpjs</id>
            <content type="html"><![CDATA[<p>As a front-end developer, you have to do many things again and again like</p>

<ul>
<li>Compiling Sass files to CSS files.</li>
<li>Concatinating all CSS files into a single CSS file.</li>
<li>Compress your final CSS file.</li>
<li>Compile your CoffeeScript files into Javascript files.</li>
<li>Linting your Javascript Code.</li>
<li>Concatenating your all Javascript files into a single Javascript file.</li>
<li>Compress your final Javascript file.</li>
<li>Compressing your Images.</li>
<li>Live Reload your browser so you don't have to manually refresh your browser after every change.</li>
</ul>

<p><a name='readmore'></a></p>

<h4>Getting Started</h4>

<p>Let's see how we can automate all the above mentioned tasks and be more productive.
The tool we are going to use is a task-runner called <a href="http://gulpjs.com/">gulp.js</a>.</p>

<p>Let's first install gulp.js globally ( <code>-g</code> ) so we can use gulp from command line.</p>

<pre><code>npm install gulp -g
</code></pre>

<p>Now let's create package.json file and add gulp.js</p>

<pre><code>cat &gt; package.json
npm install gulp --save
</code></pre>

<p>Now's lets create Gulpfile.js file where we will create all our tasks.
Now let's require gulp so we can define our tasks.</p>

<pre><code>var gulp = require('gulp');

gulp.task('default', function(){

  // code for default task goes here...

});
</code></pre>

<h4>Compiling Sass to CSS</h4>

<p>Let's first include the plugin to compile Sass to CSS.
    <code>npm install gulp-sass --save</code></p>

<p>Now let's define our task.
Assuming all your Sass files are in <strong>sass</strong> directory and you want your compiled css files in <strong>css</strong> directory.</p>

<pre><code>var sass = require('gulp-sass'); // add this at the top

// Task to compile Sass to CSS
gulp.task('sass', function () {
  gulp.src('sass/**/*.sass')
      .pipe(sass())
      .pipe(gulp.dest('css'));
});


// Run this task when "default" task is run
gulp.task('default', ['sass']);
</code></pre>

<h4>Concatinating all CSS files into a single CSS file.</h4>

<p>It is recommended to reduce the number of http requests we make to decrease page load time. One thing we can do to achieve this is to concatenate all your CSS files into one and only load one single file. We can use <code>gulp-concat</code> plugin to do this.</p>

<p>Let include it in our project.</p>

<p>npm install gulp-concat --save</p>

<p>Now let's update the task we created above.</p>

<pre><code>var sass   = require('gulp-sass'),
    concat = require('gulp-concat');


gulp.task('sass', function () {
    gulp.src('sass/**/*.scss')
        .pipe(sass())
        .pipe(gulp.dest('css'))
        .pipe(concat('style.css'))
        .pipe(gulp.dest('./'));
});
</code></pre>

<p>This will generate concated css file named style.css at given destination folder.</p>

<h4>Minify your final CSS file.</h4>

<p>To optimize it even further, we can minify the final css file so we download minimum bits of code.</p>

<p>Let's include <code>gulp-minify-css</code> plugin by running following command</p>

<p>npm install gulp-minify-css --save</p>

<p>Now let's update the task we created above.</p>

<pre><code>var sass      = require('gulp-sass'),
    concat    = require('gulp-concat'),
    minifyCSS = require('gulp-minify-css'),
    rename    = require('gulp-rename'); // to rename any file

gulp.task('sass', function () {
    gulp.src('sass/**/*.scss')
        .pipe(sass())
        .pipe(gulp.dest('css'))
        .pipe(concat('style.css'))
        .pipe(gulp.dest('./'))
        .pipe(minifyCSS())
        .pipe(rename('style.min.css'))
        .pipe(gulp.dest('./'));
});
</code></pre>

<p>This will minify css file and save it into style.min.css file.</p>

<p>Note: You can even pass an argument to SASS plugin to produce compressed output. In that case you won't have to minify the CSS again. But if you want your individual CSS file to be uncompressed, follow the steps mentioned above.</p>

<h4>Compile your CoffeeScript files into Javascript files.</h4>

<p>Now let's move to Javascript part.
If you are using CoffeeScript, you can automate the process of compiling it to Javascript without having to do it manually.</p>

<p>Let's include <code>gulp-coffee</code> plugin.</p>

<p>npm install gulp-coffee --save</p>

<p>Now let's create the task.</p>

<pre><code>var sass = require('gulp-sass'),
    concat = require('gulp-concat'),
    minifyCSS = require('gulp-minify-css'),
    rename = require('gulp-rename');

gulp.task('sass', function () {
    gulp.src('sass/**/*.scss')
        .pipe(sass())
        .pipe(gulp.dest('css'))
        .pipe(concat('style.css'))
        .pipe(gulp.dest('./'))
        .pipe(minifyCSS())
        .pipe(rename('style.min.css'))
        .pipe(gulp.dest('./'));
});


gulp.task('coffeescript', function(){
    gulp.src('coffee/*.coffee')
        .pipe(coffee())
        .pipe(gulp.dest('js'));
});

gulp.task('default', ['sass', 'coffeescript']);
</code></pre>

<p>This will compile all coffeescript files into js folders.</p>

<h4>Concatenating your all Javascript files into a single Javascript file.</h4>

<p>Like css files concatenation, we can concate our js files into one file. We have already included plugin(gulp-concat) for this task. Assuming all your</p>

<pre><code>var sass      = require('gulp-sass'),
    concat    = require('gulp-concat'),
    minifyCSS = require('gulp-minify-css'),
    rename    = require('gulp-rename'),
    coffee    = require('gulp-coffee');


gulp.task('coffeescript', function(){
    gulp.src('coffee/*.coffee')
        .pipe(coffee())
        .pipe(gulp.dest('js'))
        .pipe(concat('application.js'))
        .pipe(gulp.dest('./'));
});


// Add coffeescript to default task.
gulp.task('default', ['sass', 'coffeescript']);
</code></pre>

<h4>Minify your final Javascript file.</h4>

<p>Like we minified our CSS, let's minify our Javascript code also.
Let's install <code>gulp-uglify</code> plugin</p>

<p>npm install gulp-uglify --save</p>

<p>Let's update the task above to minify final <code>application.js</code> file to <code>application.min.js</code>.</p>

<pre><code>var sass      = require('gulp-sass'),
    concat    = require('gulp-concat'),
    minifyCSS = require('gulp-minify-css'),
    rename    = require('gulp-rename'),
    coffee    = require('gulp-coffee'),
    uglify    = require('gulp-uglify');


gulp.task('coffeescript', function(){
    gulp.src('coffee/*.coffee')
        .pipe(coffee())
        .pipe(gulp.dest('js'))
        .pipe(concat('application.js'))
        .pipe(gulp.dest('./'))
        .pipe(rename('application.min.js'))
        .pipe(uglify())
        .pipe(gulp.dest('./'));
});

gulp.task('default', ['sass', 'coffeescript']);
</code></pre>

<h4>JSLinting your Javascript Code.</h4>

<p>It's always a best practice to lint your code.
If you are your coffeescript, you don't need to go thru this task but if you are writting plain Javascript, it's better to go thru this to make sure your Javascript has no errors. Many times, few errors are ignored by modern browsers but breaks in others (read IE).</p>

<p>Let's add this as a part of our automated process using <code>gulp-jshint</code> plugin.</p>

<p>npm install gulp-jshint --save</p>

<p>Now let's create a task just do that.</p>

<p>var sass      = require('gulp-sass'),
        concat    = require('gulp-concat'),
        minifyCSS = require('gulp-minify-css'),
        rename    = require('gulp-rename'),
        coffee    = require('gulp-coffee'),
        uglify    = require('gulp-uglify'),
        jshint    = require('gulp-jshint');</p>

<pre><code>gulp.task('hint', function() {
    gulp.src('js/*.js')
        .pipe(jshint())
        .pipe(jshint.reporter('default'));
});

gulp.task('default', ['sass', 'coffeescript', 'hint']);
</code></pre>

<h4>Compressing your Images.</h4>

<p>We did everything to minimize the data we sent to the server. Why leave images.
Let's compress them as well.</p>

<p>Let's add <code>gulp-imagemin</code> plugin for that.</p>

<p>npm install gulp-imagemin --save</p>

<p>Let's create a task for that.</p>

<p>var sass      = require('gulp-sass'),
        concat    = require('gulp-concat'),
        minifyCSS = require('gulp-minify-css'),
        rename    = require('gulp-rename'),
        coffee    = require('gulp-coffee'),
        uglify    = require('gulp-uglify'),
        jshint    = require('gulp-jshint'),
        imagemin  = require('gulp-imagemin');</p>

<pre><code>gulp.task('images-opt', function () {
    gulp.src('images-orig/*.*')
        .pipe(imagemin())
        .pipe(gulp.dest('images'));
});


// Let's add this task to our default task.
gulp.task('default', ['sass', 'coffeescript', 'hint', 'images-opt']);
</code></pre>

<p>This task will optimize all our images and save them to image directory.</p>

<h4>Live Reload Browser</h4>

<p>Now here comes most interesting part. Using gulp plugin, we can also automatically refresh our browser whenever any file changes.</p>

<p>Let's include <code>gulp-livereload</code> plugin</p>

<p>npm install gulp-livereload --save</p>

<p>Now's create a task which will reload browser whenever any of our SASS, Coffeescript or Image file is added, changed, removed.</p>

<p>var sass       = require('gulp-sass'),
        concat     = require('gulp-concat'),
        minifyCSS  = require('gulp-minify-css'),
        rename     = require('gulp-rename'),
        coffee     = require('gulp-coffee'),
        uglify     = require('gulp-uglify'),
        jshint     = require('gulp-jshint'),
        imagemin   = require('gulp-imagemin'),
        livereload = require('gulp-livereload');</p>

<pre><code>gulp.task('sass', function () {
    gulp.src('sass/**/*.scss')
        .pipe(sass())
        .pipe(gulp.dest('css'))
        .pipe(concat('style.css'))
        .pipe(gulp.dest('./'))
        .pipe(minifyCSS())
        .pipe(rename('style.min.css'))
        .pipe(gulp.dest('./'))
        .pipe(livereload());
});
</code></pre>

<p>gulp.task('coffeescript', function(){
        gulp.src('coffee/*.coffee')
            .pipe(coffee())
            .pipe(gulp.dest('js'))
            .pipe(concat('application.js'))
            .pipe(gulp.dest('./'))
            .pipe(rename('application.min.js'))
            .pipe(uglify())
            .pipe(gulp.dest('./'))
            .pipe(livereload());
    });</p>

<pre><code>gulp.task('hint', function() {
    gulp.src('js/*.js')
        .pipe(jshint())
        .pipe(jshint.reporter('default'));
});

gulp.task('images-opt', function () {
    gulp.src('images-orig/*.*')
        .pipe(imagemin())
        .pipe(gulp.dest('images'))
        .pipe(livereload());
});


gulp.task('watch', function () {
    var server = livereload();

    gulp.watch('sass/**/*.scss', ['sass']);
    gulp.watch('coffee/*.coffee', ['coffeescript']);
    gulp.watch('js/*.js', ['hint']);
    gulp.watch('images-orig/*.*', ['images-opt']);

    gulp.watch('**/*.html').on('change', function(file) {
      server.changed(file.path);
    });
});

gulp.task('default', ['sass', 'coffeescript', 'images-opt', 'hint', 'watch']);
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Coming Soon page using Bootstrap 3]]></title>
            <link href="/blog/2014/02/26/coming-soon-page-bootstrap3"/>
            <updated>2014-02-26T00:00:00+01:00</updated>
            <id>/blog/2014/02/26/coming-soon-page-bootstrap3</id>
            <content type="html"><![CDATA[<p><img src="http://i.imgur.com/yJpWoil.jpg" alt="Free Coming Soon Page" /></p>

<div class='text-center'>
  <a href='https://db.tt/rxPWvNsO' class='btn btn-default' title='Free Coming Soon Page Demo' target='_blank'>Demo</a>
  <a href='https://db.tt/qpRSZl1y' class='btn btn-primary' title='Download Free Coming Soon Page' target='_blank'>Download (0.45 MB)</a>
</div>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Setting Up Laravel Project on Dreamhost]]></title>
            <link href="/blog/2014/02/22/setting-up-laravel-project-on-dreamhost"/>
            <updated>2014-02-22T00:00:00+01:00</updated>
            <id>/blog/2014/02/22/setting-up-laravel-project-on-dreamhost</id>
            <content type="html"><![CDATA[<h4>Setting default version of PHP to 5.4</h4>

<p>If the default version of PHP on your server is 5.2, you need to switch to 5.3 or 5.4.
Luckily both are present on Dreamhost VPS by default but default is set to 5.2.</p>

<ul>
<li>To switch to PHP 5.4, add <code>export PATH=/usr/local/php54/bin/:$PATH</code> to <code>~/.bash_profile</code> file.</li>
<li>You can either close the terminal and restart or run <code>source ~/.bash_profile</code> to immediately reflect the changes.</li>
<li>Run <code>php -v</code> to make sure PHP version is set to 5.4</li>
</ul>

<h4>Installing Composer</h4>

<ul>
<li>Create a directory <code>mkdir -p ~/.php/5.4</code></li>
<li>Create phprc file using <code>nano ~/.php/5.4/phprc</code> and add PHAR extension at the end of extensions list <code>extension = phar.so</code> and save the file</li>
<li>Run <code>php -m | grep Phar</code> from terminal. If output is <code>PHAR</code>, everything went fine.</li>
<li>Now download Composer using <code>curl -s https://getcomposer.org/installer | php</code> command.</li>
<li>Give execute permission to composer.phar using <code>chmod u+x composer.phar</code> command.</li>
<li>Run <code>php composer.phar</code> command and if you don't see any errors, you've successfully installed Composer.</li>
</ul>

<p><a name='readmore'></a></p>

<h4>Creating SSH Key on the Server</h4>

<p>Create an SSH key on the server and add it to your Git repository (assuming you are using Git) using following steps.
- Go to ~/.ssh firectory <code>cd ~/.ssh</code>
- Generate ssh key using <code>ssh-keygen -t rsa -C "your_email@example.com"</code> command.
- Press <em>ENTER</em> when prompted to enter file name, enter passphrase and re-enter passphrase.
- Copy the ssh key you just created which is stored in <code>~/.ssh/id_rsa.pub</code> file and add it to your Git account.
- Now you're all set to clone your repository.</p>

<h4>Final Steps</h4>

<ul>
<li>Update database credentials in <code>app\config\database.php</code> or in environment folder if any.</li>
<li>Run <code>php composer.phar install</code> to install all required packages.</li>
<li><code>php composer.phar install</code> should run all post install scripts which includes running migration and generating autload.php file.</li>
<li>Final step is to map your public directory to your server's document root. Suppose your document root is public_html, delete that folder and run <code>ln -s &lt;path to your application's directory&gt; &lt;your document root&gt;</code> command. This will create a symbolic link so your don't have to change document root to public or go through any other trouble.</li>
</ul>
]]></content>
        </entry>
    </feed>